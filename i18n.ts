import { ActionType } from './types';

export type Locale = 'it' | 'en';

export const DEFAULT_LOCALE: Locale = 'it';

// Struttura per le traduzioni. Le chiavi possono essere annidate.
export interface Translations {
  [key: string]: string | Translations;
}

export const translations: Record<Locale, Translations> = {
  it: {
    langName: "Italiano",
    general: {
      loading: "Caricamento...",
      error: "Errore",
      success: "Successo",
      warning: "Avviso",
      info: "Info",
      close: "Chiudi",
      save: "Salva",
      load: "Carica",
      delete: "Elimina",
      update: "Aggiorna",
      cancel: "Annulla",
      clear: "Pulisci",
      start: "Inizia",
      stop: "Stop",
      run: "Esegui",
      record: "Registra",
      actions: "Azioni",
      elements: "Elementi",
      name: "Nome",
      value: "Valore",
      url: "URL",
      settings: "Impostazioni",
      none: "Nessuno",
      confirmDeletionTitle: "Conferma Eliminazione",
      confirmDeletionMessage: "Sei sicuro di voler eliminare questo elemento?",
      confirmGenericTitle: "Conferma",
      page: "Pagina",
      internalTestPageName: "Pagina di Test Interna",
      yes: "Sì",
      no: "No",
    },
    navigation: {
      title: "Test Automator",
      dashboard: "Dashboard",
      createTest: "Crea Test",
      recordTest: "Registra Test",
      settings: "Impostazioni",
      logout: "Esci",
      loggedInAs: "Accesso effettuato come"
    },
    dashboard: {
      title: "Dashboard Riepilogo Test",
      totalTests: "Test Totali Salvati",
      testStatusMock: "Stato Test (Mock)",
      passed: "Superati",
      failed: "Falliti",
      notRun: "Non Eseguiti",
      createNewTest: "Crea Nuovo Test",
      startCreating: "Inizia a Creare",
      recentTests: "Test Recenti",
      noSavedTests: "Nessun test salvato trovato. Inizia creandone uno!",
      loadAndEdit: "Carica & Modifica",
      stepsCount: "Passi: {{count}}",
      savedAt: "Salvato: {{date}}",
      testUrl: "URL: {{url}}",
      testUrlNotAvailable: "URL: N/A",
    },
    settingsPage: {
      title: "Impostazioni Applicazione",
      themeSettings: "Preferenze Tema",
      darkTheme: "Scuro",
      lightTheme: "Chiaro",
      testConfiguration: "Configurazione Test",
      defaultUrlNewLabel: "URL Predefinito per Nuovi Test",
      defaultUrlPlaceholder: "https://example.com",
      notifications: "Notifiche",
      enableSystemNotifications: "Abilita notifiche di sistema (es. fine esecuzione test)",
      notificationsDisclaimer: "Questa è una funzionalità dimostrativa e non invierà notifiche reali.",
      saveSettingsButton: "Salva Impostazioni",
      settingsSavedAlert: "Impostazioni salvate! Il tema e la lingua sono stati applicati e salvati.",
      languageSettings: "Impostazioni Lingua",
      selectLanguage: "Seleziona Lingua",
      proxySettings: {
        title: "Impostazioni Proxy",
        enableProxyLabel: "Abilita proxy per pagine esterne",
        enableProxyDescription: "Il proxy aiuta ad aggirare le restrizioni cross-origin per il rilevamento degli elementi e l'interazione. Disabilitarlo potrebbe impedire il funzionamento con molti siti esterni. La Pagina di Test Interna non è affetta da questa impostazione.",
      },
    },
    createTestPage: {
      header: {
        urlPlaceholder: "Inserisci URL pagina da testare",
        loadPageButton: "Carica Pagina",
        loadInternalTestPageButton: "Carica Pagina Test Interna",
        detectElementsButton: "Individua Elementi",
        detectingElementsButton: "Rilevamento...",
        runTestButton: "Esegui Test",
        runningTestButton: "Esecuzione...",
        saveTestButton: "Salva Test",
        updateTestButton: "Aggiorna Test",
        loadExistingTestButton: "Carica Test Esistente",
      },
      actionsPanel: {
        title: "Azioni Disponibili",
        naturalLanguageTitle: "Linguaggio Naturale",
        naturalLanguagePlaceholder: "Es: vai su google.com, cerca 'test' e clicca il bottone cerca",
        generateStepsButton: "Genera Passi",
        generatingStepsButton: "Generazione...",
      },
      elementsPanel: {
        title: "Elementi Rilevati",
        detectingMessage: "Rilevamento elementi in corso...",
        noElementsDetectedMessage: "Nessun elemento rilevato. Clicca \"Individua Elementi\". Il rilevamento potrebbe fallire per siti cross-origin (controlla il log per dettagli). Prova a usare \"Carica Pagina Test Interna\" per testare questa funzionalità.",
        loadPagePrompt: "Carica una pagina per visualizzare gli elementi.",
        elementTag: "Tag: <{{tagName}}>, Selector: {{selector}}",
        crossOriginDetectionFailedHelp: "Il rilevamento elementi su siti esterni è bloccato dalla sicurezza del browser (Same-Origin Policy). Usa gli strumenti per sviluppatori del browser ('Ispeziona Elemento') per trovare i selettori CSS e inseriscili manualmente, oppure usa la 'Pagina Test Interna' per il rilevamento automatico.",
        detectionFailedGeneralHelp: "Rilevamento fallito. L'iframe potrebbe non essere accessibile (es. per restrizioni del sito o policy cross-origin non aggirabili dal proxy). Prova con la 'Pagina di Test Interna' o verifica la console del browser per dettagli.",
        fileUrlLimitations: "URL `file:///` caricato. Rilevamento elementi e interazione saranno limitati dalla sicurezza del browser.",
        externalPageNoProxyLimitations: "Pagina esterna caricata SENZA proxy. Rilevamento elementi e interazioni saranno limitati o bloccati dalla sicurezza del browser (Same-Origin Policy).",
        detectionFailedSpecific: "Rilevamento elementi fallito. Dettagli: {{error}}"
      },
      testCanvas: {
        testNamePlaceholder: "Nome del Test",
        dropActionsPrompt: "Trascina le azioni qui per iniziare a costruire il test.",
        dropHereToEnd: "Solleva qui per aggiungere alla fine",
        newTestNameDefault: "Nuovo Test",
      },
      testStepCard: {
        deleteStepTooltip: "Elimina passo",
        elementLabel: "Elemento:",
        removeElementTooltip: "(rimuovi)",
        dropElementPrompt: "Trascina un elemento qui",
        valuePlaceholderGeneric: "Inserisci valore",
        commentPlaceholder: "Aggiungi un commento (opzionale)",
        unknownAction: "Azione sconosciuta",
      },
      webPreviewPanel: {
        title: "Anteprima Pagina & Log Esecuzione",
        clearLogButton: "Pulisci Log",
        executionLog: "Log di Esecuzione",
        clearLog: "Pulisci Log",
        previewFor: "Anteprima per: {{urlForDisplay}}",
        internalPageQualifier: "(Nessun problema cross-origin)",
        externalPageQualifier: "(Potenziali problemi cross-origin con siti esterni)", // Kept for cases where proxy might not be used or fails
        proxiedPageQualifier: "(Pagina esterna via proxy)",
        externalPageNoProxyWarningShort: "(Esterna - NO Proxy, interazioni limitate!)",
        externalPageWarningShort: "(Esterna, possibili limitazioni SOP)",
        noPreviewLoaded: "Nessuna anteprima caricata.",
        loadingPreview: "Caricamento anteprima...",
        loadPagePrompt: "Carica una pagina (o la Pagina Test Interna) per visualizzare l'anteprima.",
        runningTestIndicator: "Esecuzione in corso...",
        externalPageWarning: "Stai visualizzando una pagina esterna. Il rilevamento elementi, la registrazione e le interazioni dirette del test potrebbero essere limitate dalla sicurezza del browser (Same-Origin Policy). Per funzionalità complete, prova la 'Pagina Test Interna'.",
      },
      saveModal: {
        title: "Salva Test",
        testNameLabel: "Nome del Test:",
        testNamePlaceholder: "Mio Fantastico Test",
      },
      loadModal: {
        title: "Carica Test Salvato",
        noSavedTests: "Nessun test salvato trovato.",
        urlLabel: "URL: {{url}}",
        internalPageUrl: "Pagina Test Interna",
        notAvailableUrl: "N/A",
        stepsLabel: "Passi: {{count}}",
        savedAtLabel: "Salvato: {{date}}",
      },
      alerts: {
        noUrl: "Per favore inserisci un URL.",
        invalidUrlFormat: "URL '{{url}}' non valido. Deve iniziare con http://, https://, o file:///",
        loadPageFirstForDetect: "Carica prima una pagina valida (esterna o interna).",
        internalPageNotReadyForDetect: "Pagina interna non ancora completamente caricata.",
        noStepsToRun: "Nessun passo nel test da eseguire.",
        noStepsToSave: "Nessun passo da salvare.",
        testSaved: "Test '{{name}}' salvato!",
        testUpdated: "Test '{{name}}' aggiornato!",
        enterTestName: "Inserisci un nome per il test.",
        naturalLanguageCommandNeeded: "Inserisci un comando in linguaggio naturale.",
        geminiApiKeyMissing: "ERRORE: Chiave API Gemini mancante o non valida. La generazione di passi da linguaggio naturale richiede una chiave API configurata.",
        geminiGenericError: "Errore durante la generazione dei passi da linguaggio naturale. Dettagli: {{details}}",
        pageStillLoading: "La pagina è ancora in fase di caricamento. Attendi il completamento prima di rilevare gli elementi.",
      },
      logs: {
        loadingUrl: "Caricamento URL: {{url}}...",
        usingProxyForUrl: "Utilizzo del proxy per caricare URL: {{url}}...",
        loadingDirectlyNoProxy: "Caricamento URL '{{url}}' direttamente (proxy disabilitato). Interazioni saranno limitate.",
        loadingFileUrl: "Caricamento URL file: {{url}}. Interazione limitata.",
        pageLoaded: "Pagina {{url}} caricata. Ora puoi provare a individuare gli elementi.",
        externalPageAttemptLoad: "Tentativo di caricamento/fallimento pagina esterna: {{url}}",
        errorInvalidUrl: "ERRORE: URL '{{url}}' non valido. Deve iniziare con http://, https://, o file:///",
        testLoaded: "Test '{{name}}' caricato. URL: {{url}}. Rileva elementi se necessario.",
        testLoadedWithUrl: "Test '{{name}}' caricato con URL: {{url}}.",
        testLoadedInternal: "Test '{{name}}' caricato. Utilizza la Pagina di Test Interna. Rileva elementi se necessario.",
        testLoadedNoUrl: "Test '{{name}}' caricato. Nessun URL specificato.",
        currentTestDeletedResetState: "Test corrente eliminato, stato resettato.",
        loadingInternalTestPage: "Caricamento Pagina di Test Interna...",
        internalTestPageLoaded: "Pagina di Test Interna caricata. Puoi individuare elementi e creare test senza problemi cross-origin.",
        detectingElementsFrom: "Tentativo di individuare elementi da {{source}}...",
        detectingElementsFromPage: "dalla pagina",
        detectingElementsFromInternalPage: "dalla Pagina Test Interna",
        errorIframeNotFound: "ERRORE: Iframe di anteprima non trovato nel DOM.",
        iframeAccessSuccessScanning: "Accesso al DOM dell'iframe per {{source}} riuscito. Scansione elementi...",
        detectedElementsCount: "Rilevati {{count}} elementi {{sourceDetails}}.",
        noInteractiveElementsFound: "Nessun elemento interattivo comune trovato {{sourceDetails}}.",
        errorAccessingIframeDom: "ERRORE: Impossibile accedere al contenuto dell'iframe da '{{source}}' per individuare gli elementi. ",
        errorAccessingIframeDomUnexpected: "Causa inattesa: {{error}}",
        testExecutionStarting: "Inizio esecuzione test...",
        executingStep: "Esecuzione ({{current}}/{{total}}): {{actionName}}",
        errorActionDefinitionNotFound: "ERRORE: Definizione azione non trovata.",
        errorElementNotFoundForStep: "ERRORE: Elemento con ID '{{elementId}}' (associato al passo) non trovato tra gli elementi attualmente rilevati. Potrebbe essere necessario ri-associare l'elemento se la pagina è cambiata o il rilevamento non è riuscito/aggiornato.",
        errorNoTargetElement: "ERRORE: Nessun elemento target specificato per questa azione.",
        gotoUrlActionLog: " a '{{url}}' (avvio navigazione...)",
        navigatingToUrl: "Navigazione verso {{url}}. Attesa caricamento pagina...",
        navigatingToFileUrl: "Navigazione verso URL file '{{url}}'. Interazione limitata.",
        pageNavigationCompleted: "Navigazione a pagina {{url}} completata. Aggiorna elementi se necessario.",
        errorInvalidNavigationUrl: "ERRORE NAVIGAZIONE: URL '{{url}}' non valido. Deve iniziare con http://, https://, file:///, o essere 'internal://test-page'",
        errorElementNotSpecifiedForInput: "ERRORE: Elemento non specificato o non trovato per l'input.",
        inputTextActionLog: " su '{{elementName}}' con valore '{{value}}' (tentativo di input...)",
        inputTextSuccess: "AZIONE INPUT: Testo '{{value}}' inserito in '{{elementName}}'.",
        errorInputElementNotFound: "ERRORE INPUT: Elemento '{{elementName}}' (selettore: {{selector}}) non trovato nell'iframe, non è un campo di input/textarea valido, o l'iframe non è accessibile per interazione.",
        errorAccessingIframeContentForAction: "ERRORE AZIONE: Impossibile accedere al contenuto dell'iframe per l'azione '{{actionName}}' su '{{source}}'. Controlla se il proxy ha fallito o se ci sono altre restrizioni di sicurezza.",
        errorInputInteractionFailed: "ERRORE INPUT: Interazione con l'iframe fallita per '{{elementName}}'. Causa: {{error}}. Questo è tipico dei problemi cross-origin. Usa la Pagina Test Interna per testare questa funzionalità.",
        errorElementNotSpecifiedForClick: "ERRORE: Elemento non specificato o non trovato per il click.",
        clickActionLog: " su '{{elementName}}' (tentativo di click...)",
        clickSuccess: "AZIONE CLICK: '{{elementName}}' (selettore: {{selector}}) cliccato.",
        errorClickElementNotFound: "ERRORE CLICK: Elemento '{{elementName}}' (selettore: {{selector}}) non trovato nell'iframe o non cliccabile.",
        errorClickInteractionFailed: "ERRORE CLICK: Interazione con l'iframe fallita per '{{elementName}}'. Causa: {{error}}. Questo è tipico dei problemi cross-origin. Usa la Pagina Test Interna per testare questa funzionalità.",
        errorClickFailedGeneric: "ERRORE CLICK: Tentativo di click su '{{elementName}}' fallito.",
        clickActionCompletedUpdatingElements: "Azione CLICK completata. Tentativo di aggiornamento elementi rilevati...",
        waitActionLog: " per {{seconds}} secondi.",
        waitActionInvalidValue: " - AVVISO: Valore attesa '{{value}}' non valido. Default a 1 secondo.",
        waitCompleted: "Attesa di {{seconds}}s completata.",
        errorElementNotSpecifiedForVerify: "ERRORE: Elemento non specificato o non trovato per la verifica.",
        verifyTextActionLog: " su '{{elementName}}' per il testo '{{expectedText}}' (tentativo di verifica...)",
        verifyTextSuccess: "VERIFICA TESTO: SUCCESSO. Testo atteso '{{expectedText}}' trovato in '{{elementName}}'.",
        verifyTextFailed: "VERIFICA TESTO: FALLITO. In '{{elementName}}', Previsto: '{{expectedText}}', Trovato: '{{actualText}}'.",
        errorVerifyElementNotFound: "ERRORE VERIFICA TESTO: Elemento '{{elementName}}' (selettore: {{selector}}) non trovato nell'iframe.",
        errorVerifyInteractionFailed: "ERRORE VERIFICA TESTO: Interazione fallita per '{{elementName}}'. Causa: {{error}}. Potrebbe essere cross-origin. Usa la Pagina Test Interna.",
        unhandledActionType: " - AVVISO: Tipo azione non gestito.",
        executionInterruptedCriticalError: "Esecuzione interrotta a causa di un errore critico.",
        testExecutionCompleted: "Esecuzione test completata.",
        testResultFailed: "RISULTATO TEST: Fallito ❌",
        testResultSuccess: "RISULTATO TEST: Successo ✅",
        generatingNLPSteps: "Generazione passi da linguaggio naturale...",
        errorNLPActionNotRecognized: "ERRORE NLP: Azione '{{actionName}}' non riconosciuta.",
        warningNLPElementNotFound: "AVVISO NLP: Elemento '{{elementNameOrSelector}}' per l'azione '{{actionName}}' non trovato. Associalo manualmente o assicurati che il rilevamento elementi sia aggiornato e corretto per la pagina corrente.",
        addedNLPSteps: "Aggiunti {{count}} passi generati da NLP.",
        errorNLPGeneric: "ERRORE: Fallimento generazione passi da NLP.",
        errorNLPGenericWithMessage: "ERRORE NLP: {{message}}",
        logCleared: "Log pulito.",
        confirmDeleteTest: "Sei sicuro di voler eliminare questo test?",
        waitingForPageLoadBeforeDetect: "AVVISO: La pagina è ancora in fase di caricamento. Il rilevamento elementi inizierà a breve.",
        detectingElementsWithPlaywright: "Rilevamento elementi con Playwright per URL: {{url}}...",
        errorDuringElementDetection: "ERRORE: Fallimento durante il rilevamento elementi da {{source}}. Causa: {{error}}",
        attemptedScriptInjection: "Tentativo di iniezione script: {{result}}",
        noActivePlaywrightSession: "Impossibile eseguire il test: Nessuna sessione Playwright attiva. Per favore carica prima una pagina.",
        previousSessionClosed: "Sessione Playwright precedente {{sessionId}} chiusa.",
        errorClosingPreviousSession: "Attenzione: Errore durante la chiusura della sessione Playwright precedente {{sessionId}}: {{error}}",
        playwrightSessionCreated: "Sessione Playwright {{sessionId}} creata per URL: {{url}}.",
        errorCreatingPlaywrightSession: "Errore durante la creazione della sessione Playwright per {{url}}: {{error}}",
        playwrightSessionCreatedForInternal: "Sessione Playwright {{sessionId}} creata per la Pagina di Test Interna.",
        loadingInternalTestPageViaPlaywright: "Caricamento Pagina di Test Interna tramite sessione Playwright...",
        noActiveSessionForDetect: "Impossibile rilevare gli elementi: Nessuna sessione Playwright attiva. Per favore carica prima una pagina.",
        detectingElementsInSession: "Tentativo di rilevare gli elementi nella sessione: {{sessionId}}..."
      },
      actionNames: {
        [ActionType.GOTO_URL]: "Vai a URL",
        [ActionType.INPUT_TEXT]: "Inserisci testo",
        [ActionType.CLICK]: "Clicca",
        [ActionType.WAIT]: "Aspetta",
        [ActionType.VERIFY_TEXT]: "Verifica testo",
        [ActionType.SCROLL_TO_ELEMENT]: "Scorri a Elemento",
        [ActionType.TAKE_SCREENSHOT]: "Fai Screenshot",
      }
    },
    recordTestPage: {
      title: "Record Test Actions",
      header: {
        urlPlaceholder: "Enter page URL to test",
        loadPageButton: "Load Page",
        loadInternalTestPageButton: "Load Internal Test Page",
      },
      previewPanel: {
        title: "Page Preview",
        currentUrl: "Current URL: {{url}}",
        noUrl: "None",
        loadingPreview: "Loading preview...",
        loadPagePrompt: "Load a page to display the preview.",
        warningProxyFailed: "Proxy is active for {{url}}, but iframe content is inaccessible. Recording may fail. The site might have additional protections (e.g., CSP).",
        warningFileUrl: "`file:///` URL {{url}} loaded. Recording interactions may be limited by browser security.",
        warningNoProxy: "Proxy is disabled for {{url}}. Recording interactions will be limited or blocked by browser security (Same-Origin Policy).",
      },
      controlsPanel: {
        title: "Recording Controls",
        startRecordingButton: "Start Recording",
        stopRecordingButton: "Stop Recording",
        runRecordedTestButton: "Run Recorded Test ({{count}} actions)",
      },
      recordedActionsPanel: {
        title: "Recorded Actions",
        noActionsRecorded: "No actions recorded. Start recording and interact with the page.",
        actionLabel: "{{index}}. {{actionType}}",
        onElement: "on: {{elementName}}",
        selectorLabel: "Selector: {{selector}}",
        valueLabel: "Value: {{value}}",
        commentLabel: "Comment: ",
      },
      logPanel: {
        title: "Events/Execution Log",
      },
      alerts:{
        noUrl: "Please enter a URL.",
        invalidUrlFormat: "URL '{{url}}' is invalid. It must start with http://, https://, or file:///",
        loadPageBeforeRecording: "Load a page before starting to record.",
        recordingUnavailableContentInaccessible: "Cannot start recording: iframe content for '{{url}}' is inaccessible, even with the proxy. The site may have additional security restrictions or the proxy may have failed. Try the 'Internal Test Page'.",
        recordingUnavailableNoProxy: "Cannot start recording: proxy is disabled for '{{url}}' and iframe content is inaccessible. Recording on external sites without proxy is generally blocked by browser security. Enable proxy in settings or use the 'Internal Test Page'.",
        cannotAccessIframeGeneric: "CRITICAL ERROR: Cannot access iframe content to start recording. Ensure the page is from the same origin as the app or use the Internal Test Page.",
        noActionsToRun: "No recorded actions to run.",
      },
      logs: {
        welcomeMessage: "Benvenuto nella pagina di Registrazione Test Azioni. Carica una pagina per iniziare.",
        loadingUrl: "Caricamento URL: {{url}}...",
        usingProxyForUrl: "Utilizzo del proxy per caricare URL: {{url}}...",
        loadingDirectlyNoProxy: "Caricamento URL '{{url}}' direttamente (proxy disabilitato). Interazioni saranno limitate.",
        loadingFileUrl: "Caricamento URL file: {{url}}. Interazione limitata.",
        pageLoaded: "Pagina {{url}} caricata. Puoi avviare la registrazione.",
        proxySuccessInteractionEnabled: "Proxy per {{url}} attivo e contenuto accessibile. Registrazione abilitata.",
        proxyFailedContentInaccessible: "ERRORE: Proxy per {{url}} attivo, ma il contenuto dell'iframe è rimasto inaccessibile. La registrazione potrebbe non funzionare. Il sito potrebbe avere ulteriori policy di sicurezza (es. CSP).",
        fileUrlLoadedSopWarning: "AVVISO: URL `file:///` {{url}} caricato. L'interazione e la registrazione potrebbero essere limitate dalla Same-Origin Policy del browser.",
        noProxyLoadedSopWarning: "AVVISO: Pagina esterna {{url}} caricata senza proxy. L'interazione e la registrazione saranno limitate o bloccate dalla Same-Origin Policy del browser.",
        loadingInternalTestPage: "Caricamento Pagina di Test Interna...",
        internalTestPageLoadedSuccess: "Pagina di Test Interna caricata con successo. Puoi avviare la registrazione.",
        internalAnchorClicked: "REGISTRATO: Click su ancora interna '{{elementName}}'.",
        externalLinkClickedFromInternal: "REGISTRATO: Click su link esterno '{{url}}' dalla pagina interna.",
        iframeLoadWarningCrossOrigin: "AVVISO: L'iframe caricato per {{url}} è cross-origin o l'accesso al suo contenuto è bloccato. La registrazione dettagliata degli elementi e la riproduzione automatica delle azioni NON funzioneranno. Usa la \"Pagina Test Interna\" o assicurati che la pagina sia della stessa origine dell'app.",
        errorLoadingIframe: "ERRORE: Impossibile caricare l'iframe per {{url}}. Controlla l'URL e la console del browser.",
        recordingStarted: "Registrazione avviata. Interagisci con la pagina nell'iframe.",
        clickAndInputListenersAdded: "Listeners per click e input aggiunti all'iframe.",
        errorAddingListeners: "ERRORE nell'aggiungere listeners: {{error}}. Assicurati che la pagina sia same-origin o usa la Pagina Test Interna.",
        errorAddingListenersAlert: "ERRORE nell'aggiungere listeners: {{error}}. Controlla se la pagina è same-origin. Prova con la Pagina Test Interna.",
        recordingStopped: "Registrazione fermata.",
        listenersRemoved: "Listeners rimossi dall'iframe.",
        warningRemovingListeners: "AVVISO: Errore nel rimuovere listeners (potrebbe essere cross-origin): {{error}}",
        recordedClickOnLink: "REGISTRATO: Click su link '{{elementName}}' che naviga a {{url}}",
        recordedClickComment: "Elemento: {{elementName}} ({{selector}})",
        recordedInputComment: "Elemento: {{elementName}} ({{selector}})",
        recordedClick: "REGISTRATO: Click su '{{elementName}}' (Selettore: {{selector}})",
        recordedInput: "REGISTRATO: Input in '{{elementName}}' (Selettore: {{selector}}), Valore: '{{value}}'",
        errorActionDefinitionNotFound: "ERRORE: Definizione azione per '{{actionType}}' non trovata.",
        runningRecordedTest: "Esecuzione test registrato...",
        executingStep: "ESEGUO ({{current}}/{{total}}): {{actionType}} su '{{target}}'",
        errorAccessingIframeForAction: "ERRORE: Impossibile accedere all'iframe per l'azione {{actionType}}. Test interrotto. (Probabilmente cross-origin, proxy fallito, o proxy disabilitato)",
        errorGotoUrlNotSpecified: "ERRORE: URL non specificato per GOTO_URL.",
        navigatingToUrl: "Navigazione a {{url}}... Attendi caricamento.",
        clickOnElementSuccess: "Click su '{{target}}' eseguito.",
        errorElementNotFoundForClick: "ERRORE: Elemento '{{target}}' non trovato per il click.",
        inputTextSuccess: "Testo '{{value}}' inserito in '{{target}}'.",
        errorElementNotFoundForInput: "ERRORE: Elemento '{{target}}' non trovato per l'input.",
        unsupportedActionInPlayback: "Azione '{{actionType}}' non ancora supportata in riproduzione.",
        errorDuringActionExecution: "ERRORE durante l'esecuzione di {{actionType}} su '{{target}}': {{error}}. Potrebbe essere un problema cross-origin o di accesso all'iframe.",
        testExecutionCompleted: "Esecuzione test completata.",
      },
    },
    loginPage: {
      title: "Accedi a Test Automator",
      usernameLabel: "Nome utente",
      usernamePlaceholder: "Inserisci il tuo nome utente",
      passwordLabel: "Password",
      passwordPlaceholder: "Inserisci la tua password",
      loginButton: "Accedi",
      loggingIn: "Accesso in corso...",
      errorInvalidCredentials: "Credenziali non valide",
      errorGeneric: "Si è verificato un errore durante l'accesso"
    }
  },
  en: { // English translations mirrored, placeholders for brevity if not already translated.
    langName: "English",
    general: {
      loading: "Loading...",
      error: "Error",
      success: "Success",
      warning: "Warning",
      info: "Info",
      close: "Close",
      save: "Save",
      load: "Load",
      delete: "Delete",
      update: "Update",
      cancel: "Cancel",
      clear: "Clear",
      start: "Start",
      stop: "Stop",
      run: "Run",
      record: "Record",
      actions: "Actions",
      elements: "Elements",
      name: "Name",
      value: "Value",
      url: "URL",
      settings: "Settings",
      none: "None",
      confirmDeletionTitle: "Confirm Deletion",
      confirmDeletionMessage: "Are you sure you want to delete this item?",
      confirmGenericTitle: "Confirm",
      page: "Page",
      internalTestPageName: "Internal Test Page",
      yes: "Yes",
      no: "No",
    },
    navigation: {
      title: "Test Automator",
      dashboard: "Dashboard",
      createTest: "Create Test",
      recordTest: "Record Test",
      settings: "Settings",
      logout: "Logout",
      loggedInAs: "Logged in as"
    },
    dashboard: {
      title: "Test Summary Dashboard",
      totalTests: "Total Saved Tests",
      testStatusMock: "Test Status (Mock)",
      passed: "Passed",
      failed: "Failed",
      notRun: "Not Run",
      createNewTest: "Create New Test",
      startCreating: "Start Creating",
      recentTests: "Recent Tests",
      noSavedTests: "No saved tests found. Start by creating one!",
      loadAndEdit: "Load & Edit",
      stepsCount: "Steps: {{count}}",
      savedAt: "Saved: {{date}}",
      testUrl: "URL: {{url}}",
      testUrlNotAvailable: "URL: N/A",
    },
    settingsPage: {
      title: "Application Settings",
      themeSettings: "Theme Preferences",
      darkTheme: "Dark",
      lightTheme: "Light",
      testConfiguration: "Test Configuration",
      defaultUrlNewLabel: "Default URL for New Tests",
      defaultUrlPlaceholder: "https://example.com",
      notifications: "Notifications",
      enableSystemNotifications: "Enable system notifications (e.g., test execution end)",
      notificationsDisclaimer: "This is a demonstrative feature and will not send actual notifications.",
      saveSettingsButton: "Save Settings",
      settingsSavedAlert: "Settings saved! Theme and language have been applied and saved.",
      languageSettings: "Language Settings",
      selectLanguage: "Select Language",
      proxySettings: {
        title: "Proxy Settings",
        enableProxyLabel: "Enable proxy for external pages",
        enableProxyDescription: "The proxy helps bypass cross-origin restrictions for element detection and interaction. Disabling it may prevent functionality with many external sites. The Internal Test Page is not affected by this setting.",
      },
    },
    createTestPage: {
      header: {
        urlPlaceholder: "Enter page URL to test",
        loadPageButton: "Load Page",
        loadInternalTestPageButton: "Load Internal Test Page",
        detectElementsButton: "Detect Elements",
        detectingElementsButton: "Detecting...",
        runTestButton: "Run Test",
        runningTestButton: "Running...",
        saveTestButton: "Save Test",
        updateTestButton: "Update Test",
        loadExistingTestButton: "Load Existing Test",
      },
      actionsPanel: {
        title: "Available Actions",
        naturalLanguageTitle: "Natural Language",
        naturalLanguagePlaceholder: "E.g.: go to google.com, search 'test' and click search button",
        generateStepsButton: "Generate Steps",
        generatingStepsButton: "Generating...",
      },
      elementsPanel: {
        title: "Detected Elements",
        detectingMessage: "Detecting elements...",
        noElementsDetectedMessage: "No elements detected. Click \"Detect Elements\". Detection might fail for cross-origin sites (check log for details). Try using \"Load Internal Test Page\" to test this feature.",
        loadPagePrompt: "Load a page to view elements.",
        elementTag: "Tag: <{{tagName}}>, Selector: {{selector}}",
        crossOriginDetectionFailedHelp: "Element detection on external sites is blocked by browser security (Same-Origin Policy). Use browser developer tools ('Inspect Element') to find CSS selectors and input them manually, or use the 'Internal Test Page' for automatic detection.",
        detectionFailedGeneralHelp: "Detection failed. The iframe might be inaccessible (e.g., due to site restrictions or cross-origin policies not bypassable by the proxy). Try the 'Internal Test Page' or check the browser console for details.",
        fileUrlLimitations: "File URL `file:///` loaded. Element detection and interaction will be limited by browser security.",
        externalPageNoProxyLimitations: "External page loaded WITHOUT proxy. Element detection and interactions will be limited or blocked by browser security (Same-Origin Policy).",
        detectionFailedSpecific: "Element detection failed. Details: {{error}}"
      },
      testCanvas: {
        testNamePlaceholder: "Test Name",
        dropActionsPrompt: "Drag actions here to start building the test.",
        dropHereToEnd: "Drop here to add to the end",
        newTestNameDefault: "New Test",
      },
      testStepCard: {
        deleteStepTooltip: "Delete step",
        elementLabel: "Element:",
        removeElementTooltip: "(remove)",
        dropElementPrompt: "Drag an element here",
        valuePlaceholderGeneric: "Enter value",
        commentPlaceholder: "Add an optional comment",
        unknownAction: "Unknown Action",
      },
      webPreviewPanel: {
        title: "Page Preview & Execution Log",
        clearLogButton: "Clear Log",
        executionLog: "Execution Log",
        clearLog: "Clear Log",
        previewFor: "Preview for: {{urlForDisplay}}",
        internalPageQualifier: "(No cross-origin issues)",
        externalPageQualifier: "(Potential cross-origin issues with external sites)",
        proxiedPageQualifier: "(External page via proxy)",
        externalPageNoProxyWarningShort: "(External - NO Proxy, interactions limited!)",
        externalPageWarningShort: "(External, possible SOP limitations)",
        noPreviewLoaded: "No preview loaded.",
        loadingPreview: "Loading preview...",
        loadPagePrompt: "Load a page (or Internal Test Page) to display the preview.",
        runningTestIndicator: "Execution in progress...",
        externalPageWarning: "You are viewing an external page. Element detection, recording, and direct test interactions may be limited by browser security (Same-Origin Policy). For full functionality, try the 'Internal Test Page'.",
      },
      saveModal: {
        title: "Save Test",
        testNameLabel: "Test Name:",
        testNamePlaceholder: "My Awesome Test",
      },
      loadModal: {
        title: "Load Saved Test",
        noSavedTests: "No saved tests found.",
        urlLabel: "URL: {{url}}",
        internalPageUrl: "Internal Test Page",
        notAvailableUrl: "N/A",
        stepsLabel: "Steps: {{count}}",
        savedAtLabel: "Saved: {{date}}",
      },
      alerts: {
        noUrl: "Please enter a URL.",
        invalidUrlFormat: "URL '{{url}}' is invalid. It must start with http://, https://, or file:///",
        loadPageFirstForDetect: "Load a valid page (external or internal) first.",
        internalPageNotReadyForDetect: "Internal page not fully loaded yet.",
        noStepsToRun: "No steps in the test to run.",
        noStepsToSave: "No steps to save.",
        testSaved: "Test '{{name}}' saved!",
        testUpdated: "Test '{{name}}' updated!",
        enterTestName: "Please enter a name for the test.",
        naturalLanguageCommandNeeded: "Please enter a natural language command.",
        geminiApiKeyMissing: "ERROR: Gemini API key missing or invalid. Natural language step generation requires a configured API key.",
        geminiGenericError: "Error generating steps from natural language. Details: {{details}}",
        pageStillLoading: "The page is still loading. Please wait for it to complete before detecting elements.",
      },
      logs: {
        loadingUrl: "Loading URL: {{url}}...",
        usingProxyForUrl: "Using proxy to load URL: {{url}}...",
        loadingDirectlyNoProxy: "Loading URL '{{url}}' directly (proxy disabled). Interactions will be limited.",
        loadingFileUrl: "Loading file URL: {{url}}. Interaction limited.",
        pageLoaded: "Page {{url}} loaded. You can now try to detect elements.",
        externalPageAttemptLoad: "Attempted load/failure of external page: {{url}}",
        errorInvalidUrl: "ERROR: URL '{{url}}' invalid. Must start with http://, https://, or file:///",
        testLoaded: "Test '{{name}}' loaded. URL: {{url}}. Detect elements if needed.",
        testLoadedWithUrl: "Test '{{name}}' loaded with URL: {{url}}.",
        testLoadedInternal: "Test '{{name}}' loaded. Uses Internal Test Page. Detect elements if needed.",
        testLoadedNoUrl: "Test '{{name}}' loaded. No URL specified.",
        currentTestDeletedResetState: "Current test deleted, state reset.",
        loadingInternalTestPage: "Loading Internal Test Page...",
        internalTestPageLoaded: "Internal Test Page loaded. You can detect elements and create tests without cross-origin issues.",
        detectingElementsFrom: "Attempting to detect elements from {{source}}...",
        detectingElementsFromPage: "the page",
        detectingElementsFromInternalPage: "the Internal Test Page",
        errorIframeNotFound: "ERROR: Preview iframe not found in DOM.",
        iframeAccessSuccessScanning: "Successfully accessed iframe DOM for {{source}}. Scanning elements...",
        detectedElementsCount: "Detected {{count}} elements {{sourceDetails}}.",
        noInteractiveElementsFound: "No common interactive elements found {{sourceDetails}}.",
        errorAccessingIframeDom: "ERROR: Cannot access iframe content from '{{source}}' to detect elements. ",
        errorAccessingIframeDomUnexpected: "Unexpected cause: {{error}}",
        testExecutionStarting: "Starting test execution...",
        executingStep: "Executing ({{current}}/{{total}}): {{actionName}}",
        errorActionDefinitionNotFound: "ERROR: Action definition not found.",
        errorElementNotFoundForStep: "ERROR: Element with ID '{{elementId}}' (associated with step) not found among currently detected elements. You may need to re-associate the element if the page changed or detection failed/is outdated.",
        errorNoTargetElement: "ERROR: No target element specified for this action.",
        gotoUrlActionLog: " to '{{url}}' (initiating navigation...)",
        navigatingToUrl: "Navigating to {{url}}. Waiting for page load...",
        navigatingToFileUrl: "Navigating to file URL '{{url}}'. Interaction limited.",
        pageNavigationCompleted: "Page navigation to {{url}} completed. Update elements if needed.",
        errorInvalidNavigationUrl: "NAVIGATION ERROR: URL '{{url}}' invalid. Must start with http://, https://, file:///, or be 'internal://test-page'",
        errorElementNotSpecifiedForInput: "ERROR: Element not specified or not found for input.",
        inputTextActionLog: " on '{{elementName}}' with value '{{value}}' (attempting input...)",
        inputTextSuccess: "INPUT ACTION: Text '{{value}}' entered into '{{elementName}}'.",
        errorInputElementNotFound: "INPUT ERROR: Element '{{elementName}}' (selector: {{selector}}) not found in iframe, is not a valid input/textarea field, or iframe is not accessible for interaction.",
        errorAccessingIframeContentForAction: "ACTION ERROR: Cannot access iframe content for action '{{actionName}}' on '{{source}}'. Check if proxy failed or other security restrictions apply.",
        errorInputInteractionFailed: "INPUT ERROR: Interaction with iframe failed for '{{elementName}}'. Cause: {{error}}. This is typical for cross-origin issues. Use the Internal Test Page to test this functionality.",
        errorElementNotSpecifiedForClick: "ERROR: Element not specified or not found for click.",
        clickActionLog: " on '{{elementName}}' (attempting click...)",
        clickSuccess: "CLICK ACTION: '{{elementName}}' (selector: {{selector}}) clicked.",
        errorClickElementNotFound: "CLICK ERROR: Element '{{elementName}}' (selector: {{selector}}) not found in iframe or not clickable.",
        errorClickInteractionFailed: "CLICK ERROR: Interaction with iframe failed for '{{elementName}}'. Cause: {{error}}. This is typical for cross-origin issues. Use the Internal Test Page to test this functionality.",
        errorClickFailedGeneric: "CLICK ERROR: Attempt to click '{{elementName}}' failed.",
        clickActionCompletedUpdatingElements: "CLICK action completed. Attempting to update detected elements...",
        waitActionLog: " for {{seconds}} seconds.",
        waitActionInvalidValue: " - WARNING: Wait value '{{value}}' invalid. Defaulting to 1 second.",
        waitCompleted: "Wait of {{seconds}}s completed.",
        errorElementNotSpecifiedForVerify: "ERROR: Element not specified or not found for verification.",
        verifyTextActionLog: " on '{{elementName}}' for text '{{expectedText}}' (attempting verification...)",
        verifyTextSuccess: "VERIFY TEXT: SUCCESS. Expected text '{{expectedText}}' found in '{{elementName}}'.",
        verifyTextFailed: "VERIFY TEXT: FAILED. In '{{elementName}}', Expected: '{{expectedText}}', Found: '{{actualText}}'.",
        errorVerifyElementNotFound: "VERIFY TEXT ERROR: Element '{{elementName}}' (selector: {{selector}}) not found in iframe.",
        errorVerifyInteractionFailed: "VERIFY TEXT ERROR: Interaction failed for '{{elementName}}'. Cause: {{error}}. Could be cross-origin. Use the Internal Test Page.",
        unhandledActionType: " - WARNING: Unhandled action type.",
        executionInterruptedCriticalError: "Execution stopped due to a critical error.",
        testExecutionCompleted: "Test execution completed.",
        testResultFailed: "TEST RESULT: Failed ❌",
        testResultSuccess: "TEST RESULT: Success ✅",
        generatingNLPSteps: "Generating steps from natural language...",
        errorNLPActionNotRecognized: "NLP ERROR: Action '{{actionName}}' not recognized.",
        warningNLPElementNotFound: "NLP WARNING: Element '{{elementNameOrSelector}}' for action '{{actionName}}' not found. Associate it manually or ensure element detection is up-to-date and correct for the current page.",
        addedNLPSteps: "Added {{count}} NLP-generated steps.",
        errorNLPGeneric: "ERROR: Failed to generate steps from NLP.",
        errorNLPGenericWithMessage: "NLP ERROR: {{message}}",
        logCleared: "Log cleared.",
        confirmDeleteTest: "Are you sure you want to delete this test?",
        waitingForPageLoadBeforeDetect: "WARNING: Page is still loading. Element detection will commence shortly.",
        detectingElementsWithPlaywright: "Detecting elements with Playwright for URL: {{url}}...",
        errorDuringElementDetection: "ERROR: Failed during element detection from {{source}}. Cause: {{error}}",
        attemptedScriptInjection: "Script injection attempt: {{result}}",
        noActivePlaywrightSession: "Cannot run test: No active Playwright session. Please load a page first.",
        previousSessionClosed: "Previous Playwright session {{sessionId}} closed.",
        errorClosingPreviousSession: "Warning: Error closing previous Playwright session {{sessionId}}: {{error}}",
        playwrightSessionCreated: "Playwright session {{sessionId}} created for URL: {{url}}.",
        errorCreatingPlaywrightSession: "Error creating Playwright session for {{url}}: {{error}}",
        playwrightSessionCreatedForInternal: "Playwright session {{sessionId}} created for Internal Test Page.",
        loadingInternalTestPageViaPlaywright: "Loading Internal Test Page via Playwright session...",
        noActiveSessionForDetect: "Cannot detect elements: No active Playwright session. Please load a page first.",
        detectingElementsInSession: "Attempting to detect elements in session: {{sessionId}}..."
      },
      actionNames: {
        [ActionType.GOTO_URL]: "Go to URL",
        [ActionType.INPUT_TEXT]: "Input Text",
        [ActionType.CLICK]: "Click",
        [ActionType.WAIT]: "Wait",
        [ActionType.VERIFY_TEXT]: "Verify Text",
        [ActionType.SCROLL_TO_ELEMENT]: "Scroll to Element",
        [ActionType.TAKE_SCREENSHOT]: "Take Screenshot",
      }
    },
    recordTestPage: {
      title: "Record Test Actions",
      header: {
        urlPlaceholder: "Enter page URL to test",
        loadPageButton: "Load Page",
        loadInternalTestPageButton: "Load Internal Test Page",
      },
      previewPanel: {
        title: "Page Preview",
        currentUrl: "Current URL: {{url}}",
        noUrl: "None",
        loadingPreview: "Loading preview...",
        loadPagePrompt: "Load a page to display the preview.",
        warningProxyFailed: "Proxy is active for {{url}}, but iframe content is inaccessible. Recording may fail. The site might have additional protections (e.g., CSP).",
        warningFileUrl: "`file:///` URL {{url}} loaded. Recording interactions may be limited by browser security.",
        warningNoProxy: "Proxy is disabled for {{url}}. Recording interactions will be limited or blocked by browser security (Same-Origin Policy).",
      },
      controlsPanel: {
        title: "Recording Controls",
        startRecordingButton: "Start Recording",
        stopRecordingButton: "Stop Recording",
        runRecordedTestButton: "Run Recorded Test ({{count}} actions)",
      },
      recordedActionsPanel: {
        title: "Recorded Actions",
        noActionsRecorded: "No actions recorded. Start recording and interact with the page.",
        actionLabel: "{{index}}. {{actionType}}",
        onElement: "on: {{elementName}}",
        selectorLabel: "Selector: {{selector}}",
        valueLabel: "Value: {{value}}",
        commentLabel: "Comment: ",
      },
      logPanel: {
        title: "Events/Execution Log",
      },
      alerts:{
        noUrl: "Please enter a URL.",
        invalidUrlFormat: "URL '{{url}}' is invalid. It must start with http://, https://, or file:///",
        loadPageBeforeRecording: "Load a page before starting to record.",
        recordingUnavailableContentInaccessible: "Cannot start recording: iframe content for '{{url}}' is inaccessible, even with the proxy. The site may have additional security restrictions or the proxy may have failed. Try the 'Internal Test Page'.",
        recordingUnavailableNoProxy: "Cannot start recording: proxy is disabled for '{{url}}' and iframe content is inaccessible. Recording on external sites without proxy is generally blocked by browser security. Enable proxy in settings or use the 'Internal Test Page'.",
        cannotAccessIframeGeneric: "CRITICAL ERROR: Cannot access iframe content to start recording. Ensure the page is from the same origin as the app or use the Internal Test Page.",
        noActionsToRun: "No recorded actions to run.",
      },
      logs: {
        welcomeMessage: "Welcome to the Record Test Actions page. Load a page to begin.",
        loadingUrl: "Loading URL: {{url}}...",
        usingProxyForUrl: "Using proxy to load URL: {{url}}...",
        loadingDirectlyNoProxy: "Loading URL '{{url}}' directly (proxy disabled). Interactions will be limited.",
        loadingFileUrl: "Loading file URL: {{url}}. Interaction limited.",
        pageLoaded: "Page {{url}} loaded. You can start recording.",
        proxySuccessInteractionEnabled: "Proxy for {{url}} active and content accessible. Recording enabled.",
        proxyFailedContentInaccessible: "ERROR: Proxy for {{url}} active, but iframe content remained inaccessible. Recording may not work. Site might have additional security policies (e.g., CSP).",
        fileUrlLoadedSopWarning: "WARNING: `file:///` URL {{url}} loaded. Interaction and recording may be limited by browser Same-Origin Policy.",
        noProxyLoadedSopWarning: "WARNING: External page {{url}} loaded without proxy. Interaction and recording will be limited or blocked by browser Same-Origin Policy.",
        loadingInternalTestPage: "Loading Internal Test Page...",
        internalTestPageLoadedSuccess: "Internal Test Page loaded successfully. You can start recording.",
        internalAnchorClicked: "RECORDED: Click on internal anchor '{{elementName}}'.",
        externalLinkClickedFromInternal: "RECORDED: Click on external link '{{url}}' from internal page.",
        iframeLoadWarningCrossOrigin: "WARNING: The loaded iframe for {{url}} is cross-origin or access to its content is blocked. Detailed element recording and automated action playback will NOT work. Use the \"Internal Test Page\" or ensure the page is from the same origin as the app.",
        errorLoadingIframe: "ERROR: Failed to load iframe for {{url}}. Check the URL and browser console.",
        recordingStarted: "Recording started. Interact with the page in the iframe.",
        clickAndInputListenersAdded: "Click and input listeners added to iframe.",
        errorAddingListeners: "ERROR adding listeners: {{error}}. Ensure the page is same-origin or use the Internal Test Page.",
        errorAddingListenersAlert: "ERROR adding listeners: {{error}}. Check if page is same-origin. Try with Internal Test Page.",
        recordingStopped: "Recording stopped.",
        listenersRemoved: "Listeners removed from iframe.",
        warningRemovingListeners: "WARNING: Error removing listeners (could be cross-origin): {{error}}",
        recordedClickOnLink: "RECORDED: Click on link '{{elementName}}' navigating to {{url}}",
        recordedClickComment: "Element: {{elementName}} ({{selector}})",
        recordedInputComment: "Element: {{elementName}} ({{selector}})",
        recordedClick: "RECORDED: Click on '{{elementName}}' (Selector: {{selector}})",
        recordedInput: "RECORDED: Input in '{{elementName}}' (Selector: {{selector}}), Value: '{{value}}'",
        errorActionDefinitionNotFound: "ERROR: Action definition for '{{actionType}}' not found.",
        runningRecordedTest: "Running recorded test...",
        executingStep: "EXECUTING ({{current}}/{{total}}): {{actionType}} on '{{target}}'",
        errorAccessingIframeForAction: "ERROR: Cannot access iframe for action {{actionType}}. Test aborted. (Likely cross-origin, proxy failed, or proxy disabled)",
        errorGotoUrlNotSpecified: "ERROR: URL not specified for GOTO_URL.",
        navigatingToUrl: "Navigating to {{url}}... Wait for load.",
        clickOnElementSuccess: "Click on '{{target}}' executed.",
        errorElementNotFoundForClick: "ERROR: Element '{{target}}' not found for click.",
        inputTextSuccess: "Text '{{value}}' entered into '{{target}}'.",
        errorElementNotFoundForInput: "ERROR: Element '{{target}}' not found for input.",
        unsupportedActionInPlayback: "Action '{{actionType}}' not yet supported in playback.",
        errorDuringActionExecution: "ERROR during execution of {{actionType}} on '{{target}}': {{error}}. This could be a cross-origin or iframe access issue.",
        testExecutionCompleted: "Test execution completed.",
      },
    },
    loginPage: {
      title: "Accedi a Test Automator",
      usernameLabel: "Nome utente",
      usernamePlaceholder: "Inserisci il tuo nome utente",
      passwordLabel: "Password",
      passwordPlaceholder: "Inserisci la tua password",
      loginButton: "Accedi",
      loggingIn: "Accesso in corso...",
      errorInvalidCredentials: "Credenziali non valide",
      errorGeneric: "Si è verificato un errore durante l'accesso"
    }
  }
};

export function createTranslateFunction(locale: Locale, currentTranslations: Translations) {
  return function t(key: string, interpolations?: Record<string, string | number | undefined>): string {
    const keys = key.split('.');
    let result: string | Translations | undefined = currentTranslations;

    for (const k of keys) {
      if (typeof result === 'object' && result !== null && k in result) {
        result = (result as Translations)[k];
      } else {
        console.warn(`Translation key "${key}" not found for locale "${locale}".`);
        return key; // Return the key itself as a fallback
      }
    }

    if (typeof result === 'string') {
      if (interpolations) {
        return Object.entries(interpolations).reduce((acc, [interKey, value]) => {
          // Ensure value is a string for replacement
          const replacementValue = value === undefined || value === null ? '' : String(value);
          return acc.replace(new RegExp(`{{${interKey}}}`, 'g'), replacementValue);
        }, result);
      }
      return result;
    }
    
    console.warn(`Incomplete translation key "${key}" for locale "${locale}". Expected string, got object.`);
    return key; // Fallback for incomplete key path
  };
}
